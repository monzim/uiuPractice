{
	"JavaGUI": {
		"prefix": "jGui",
		"body": [
		  "import javax.swing.*;",
		  "import java.awt.*;",
		  "import java.awt.event.ActionEvent;",
		  "import java.awt.event.ActionListener;",
		  "",
		  "public class ${1:GuiHelper} extends JFrame {",
		  "    private JTextField numberField;",
		  "    private JButton multiplyButton;",
		  "    private JLabel resultLabel;",
		  "",
		  "    public ${1:GuiHelper}() {",
		  "        setTitle(\"Java GUI\");",
		  "        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);",
		  "        setSize(300, 150);",
		  "        setLocationRelativeTo(null);",
		  "        setLayout(new GridLayout(3, 1));",
		  "",
		  "        numberField = new JTextField(10);",
		  "        multiplyButton = new JButton(\"Multiply\");",
		  "        resultLabel = new JLabel(\"Result: \");",
		  "",
		  "        add(numberField);",
		  "        add(multiplyButton);",
		  "        add(resultLabel);",
		  "",
		  "        multiplyButton.addActionListener(new ActionListener() {",
		  "            @Override",
		  "            public void actionPerformed(ActionEvent e) {",
		  "                multiply();",
		  "            }",
		  "        });",
		  "    }",
		  "",
		  "    private void multiply() {",
		  "        try {",
		  "            String userInput = numberField.getText();",
		  "            double inputNumber = Double.parseDouble(userInput);",
		  "",
		  "            double multiplier = 2.0;",
		  "            double result = inputNumber * multiplier;",
		  "",
		  "            resultLabel.setText(\"Result: \" + result);",
		  "        } catch (NumberFormatException ex) {",
		  "            resultLabel.setText(\"Result: Invalid input\");",
		  "        }",
		  "    }",
		  "",
		  "    public static void main(String[] args) {",
		  "        SwingUtilities.invokeLater(new Runnable() {",
		  "            public void run() {",
		  "                Gui gui = new Gui();",
		  "                gui.setVisible(true);",
		  "            }",
		  "        });",
		  "    }",
		  "}",
		  ""
		],
		"description": "JavaGUI"
	  },

	  "Simple JavaGUI": {
		"prefix": "jGuiSimple",
		"body": [
		  "",
		  "import javax.swing.*;",
		  "import java.awt.*;",
		  "",
		  "public class SimpleGui {",
		  "",
		  "    public static void main(String[] args) {",
		  "        // Create the main JFrame",
		  "        JFrame frame = new JFrame(\"Simple GUI Snippet\");",
		  "        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);",
		  "        frame.setSize(300, 200);",
		  "        frame.setLayout(new BorderLayout());",
		  "",
		  "        // Create components",
		  "        JLabel label = new JLabel(\"Enter your name:\");",
		  "        JTextField textField = new JTextField();",
		  "        JButton button = new JButton(\"Submit\");",
		  "",
		  "        // Add components to the frame",
		  "        frame.add(label, BorderLayout.NORTH);",
		  "        frame.add(textField, BorderLayout.CENTER);",
		  "        frame.add(button, BorderLayout.SOUTH);",
		  "",
		  "        // Add an action listener to the button",
		  "        button.addActionListener(e -> {",
		  "            String input = textField.getText();",
		  "            JOptionPane.showMessageDialog(frame, \"Hello, \" + input + \"!\");",
		  "        });",
		  "",
		  "        // Set the frame to be visible",
		  "        frame.setVisible(true);",
		  "    }",
		  "}",
		  ""
		],
		"description": "Simple JavaGUI"
	  },
	  "Java Gui FileChooserApp": {
		"prefix": "jguiFileChooser",
		"body": [
		  "import javax.swing.*;",
		  "import java.awt.*;",
		  "import java.awt.event.ActionEvent;",
		  "import java.awt.event.ActionListener;",
		  "import java.io.File;",
		  "",
		  "public class FileChooserApp extends JFrame {",
		  "    private JButton chooseButton;",
		  "    private JLabel pathLabel;",
		  "",
		  "    public FileChooserApp() {",
		  "        // Set up the JFrame",
		  "        setTitle(\"File Chooser App\");",
		  "        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);",
		  "        setSize(400, 150);",
		  "        setLocationRelativeTo(null);",
		  "        setLayout(new BorderLayout());",
		  "",
		  "        // Create components",
		  "        chooseButton = new JButton(\"Choose File\");",
		  "        pathLabel = new JLabel(\"Selected File: \");",
		  "",
		  "        // Add components to the frame",
		  "        add(chooseButton, BorderLayout.NORTH);",
		  "        add(pathLabel, BorderLayout.CENTER);",
		  "",
		  "        // Add action listener to the button",
		  "        chooseButton.addActionListener(new ActionListener() {",
		  "            @Override",
		  "            public void actionPerformed(ActionEvent e) {",
		  "                showFileChooser();",
		  "            }",
		  "        });",
		  "    }",
		  "",
		  "    private void showFileChooser() {",
		  "        JFileChooser fileChooser = new JFileChooser();",
		  "",
		  "        int result = fileChooser.showOpenDialog(this);",
		  "",
		  "        if (result == JFileChooser.APPROVE_OPTION) {",
		  "            File selectedFile = fileChooser.getSelectedFile();",
		  "            pathLabel.setText(\"Selected File: \" + selectedFile.getAbsolutePath());",
		  "        } else {",
		  "            pathLabel.setText(\"Selected File: No file selected\");",
		  "        }",
		  "    }",
		  "",
		  "    public static void main(String[] args) {",
		  "        SwingUtilities.invokeLater(new Runnable() {",
		  "            @Override",
		  "            public void run() {",
		  "                new FileChooserApp().setVisible(true);",
		  "            }",
		  "        });",
		  "    }",
		  "}",
		  ""
		],
		"description": "Java Gui FileChooserApp"
	  },
	  "Java Gui FileReadAndDisplay": {
		"prefix": "jguiFileReadAndDisplay",
		"body": [
		  "import javax.swing.*;",
		  "import java.awt.*;",
		  "import java.awt.event.ActionEvent;",
		  "import java.awt.event.ActionListener;",
		  "import java.io.BufferedReader;",
		  "import java.io.File;",
		  "import java.io.FileReader;",
		  "import java.io.IOException;",
		  "",
		  "public class FileReadAndDisplayApp extends JFrame {",
		  "    private JButton readFileButton;",
		  "    private JTextArea contentTextArea;",
		  "",
		  "    public FileReadAndDisplayApp() {",
		  "        // Set up the JFrame",
		  "        setTitle(\"File Read and Display App\");",
		  "        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);",
		  "        setSize(400, 300);",
		  "        setLocationRelativeTo(null);",
		  "        setLayout(new BorderLayout());",
		  "",
		  "        // Create components",
		  "        readFileButton = new JButton(\"Read File\");",
		  "        contentTextArea = new JTextArea();",
		  "",
		  "        // Add components to the frame",
		  "        add(readFileButton, BorderLayout.NORTH);",
		  "        add(new JScrollPane(contentTextArea), BorderLayout.CENTER);",
		  "",
		  "        // Add action listener to the button",
		  "        readFileButton.addActionListener(new ActionListener() {",
		  "            @Override",
		  "            public void actionPerformed(ActionEvent e) {",
		  "                readAndDisplayFileContent();",
		  "            }",
		  "        });",
		  "    }",
		  "",
		  "    private void readAndDisplayFileContent() {",
		  "        JFileChooser fileChooser = new JFileChooser();",
		  "",
		  "        int result = fileChooser.showOpenDialog(this);",
		  "",
		  "        if (result == JFileChooser.APPROVE_OPTION) {",
		  "            File selectedFile = fileChooser.getSelectedFile();",
		  "",
		  "            try {",
		  "                BufferedReader reader = new BufferedReader(new FileReader(selectedFile));",
		  "                StringBuilder content = new StringBuilder();",
		  "                String line;",
		  "",
		  "                while ((line = reader.readLine()) != null) {",
		  "                    content.append(line).append(\"\\n\");",
		  "                }",
		  "",
		  "                reader.close();",
		  "                contentTextArea.setText(content.toString());",
		  "            } catch (IOException ex) {",
		  "                contentTextArea.setText(\"Error reading the file.\");",
		  "            }",
		  "        }",
		  "    }",
		  "",
		  "    public static void main(String[] args) {",
		  "        SwingUtilities.invokeLater(new Runnable() {",
		  "            @Override",
		  "            public void run() {",
		  "                new FileReadAndDisplayApp().setVisible(true);",
		  "            }",
		  "        });",
		  "    }",
		  "}",
		  ""
		],
		"description": "Java Gui FileReadAndDisplay"
	  },

	  "Java Gui FileEditorApp": {
		"prefix": "jguiFileEditor",
		"body": [
		  "import java.awt.BorderLayout;",
		  "import java.awt.event.ActionEvent;",
		  "import java.awt.event.ActionListener;",
		  "import java.io.BufferedReader;",
		  "import java.io.File;",
		  "import java.io.FileReader;",
		  "import java.io.IOException;",
		  "import java.io.PrintWriter;",
		  "",
		  "import javax.swing.JButton;",
		  "import javax.swing.JFileChooser;",
		  "import javax.swing.JFrame;",
		  "import javax.swing.JOptionPane;",
		  "import javax.swing.JPanel;",
		  "import javax.swing.JScrollPane;",
		  "import javax.swing.JTextArea;",
		  "import javax.swing.SwingUtilities;",
		  "",
		  "public class FileEditorApp extends JFrame {",
		  "    private JTextArea textArea;",
		  "    private JButton saveButton;",
		  "    private JButton openButton;",
		  "",
		  "    public FileEditorApp() {",
		  "        setTitle(\"File Editor\");",
		  "        setSize(400, 300);",
		  "        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);",
		  "",
		  "        textArea = new JTextArea();",
		  "        saveButton = new JButton(\"Save\");",
		  "        openButton = new JButton(\"Open\");",
		  "",
		  "        saveButton.addActionListener(new ActionListener() {",
		  "            @Override",
		  "            public void actionPerformed(ActionEvent e) {",
		  "                saveToFile();",
		  "            }",
		  "        });",
		  "",
		  "        openButton.addActionListener(new ActionListener() {",
		  "            @Override",
		  "            public void actionPerformed(ActionEvent e) {",
		  "                openFile();",
		  "            }",
		  "        });",
		  "",
		  "        JScrollPane scrollPane = new JScrollPane(textArea);",
		  "",
		  "        JPanel buttonPanel = new JPanel();",
		  "        buttonPanel.add(saveButton);",
		  "        buttonPanel.add(openButton);",
		  "",
		  "        getContentPane().setLayout(new BorderLayout());",
		  "        getContentPane().add(scrollPane, BorderLayout.CENTER);",
		  "        getContentPane().add(buttonPanel, BorderLayout.SOUTH);",
		  "    }",
		  "",
		  "    private void openFile() {",
		  "        JFileChooser fileChooser = new JFileChooser();",
		  "        int choice = fileChooser.showOpenDialog(this);",
		  "",
		  "        if (choice == JFileChooser.APPROVE_OPTION) {",
		  "            File selectedFile = fileChooser.getSelectedFile();",
		  "            loadFileContent(selectedFile);",
		  "        }",
		  "    }",
		  "",
		  "    private void saveToFile() {",
		  "        JFileChooser fileChooser = new JFileChooser();",
		  "        int choice = fileChooser.showSaveDialog(this);",
		  "",
		  "        if (choice == JFileChooser.APPROVE_OPTION) {",
		  "            File selectedFile = fileChooser.getSelectedFile();",
		  "",
		  "            try (PrintWriter writer = new PrintWriter(selectedFile)) {",
		  "                writer.write(textArea.getText());",
		  "                writer.flush();",
		  "                JOptionPane.showMessageDialog(this, \"File saved successfully.\");",
		  "            } catch (IOException ex) {",
		  "                JOptionPane.showMessageDialog(this, \"Error saving file: \" + ex.getMessage(), \"Error\",",
		  "                        JOptionPane.ERROR_MESSAGE);",
		  "            }",
		  "        }",
		  "    }",
		  "",
		  "    public void loadFileContent(File file) {",
		  "        try (BufferedReader reader = new BufferedReader(new FileReader(file))) {",
		  "            StringBuilder content = new StringBuilder();",
		  "            String line;",
		  "            while ((line = reader.readLine()) != null) {",
		  "                content.append(line).append(\"\\n\");",
		  "            }",
		  "            textArea.setText(content.toString());",
		  "        } catch (IOException ex) {",
		  "            JOptionPane.showMessageDialog(this, \"Error loading file: \" + ex.getMessage(), \"Error\",",
		  "                    JOptionPane.ERROR_MESSAGE);",
		  "        }",
		  "    }",
		  "",
		  "    public static void main(String[] args) {",
		  "        SwingUtilities.invokeLater(() -> {",
		  "            FileEditorApp editorApp = new FileEditorApp();",
		  "            editorApp.setVisible(true);",
		  "        });",
		  "    }",
		  "}"
		],
		"description": "Java Gui FileEditorApp"
	  },

	  "Java Gui FileChatApp": {
		"prefix": "jguiFileChatApp",
		"body": [
		  "import javax.swing.*;",
		  "import java.awt.*;",
		  "import java.awt.event.*;",
		  "import java.io.*;",
		  "import java.util.TimerTask;",
		  "import java.util.Timer;",
		  "",
		  "public class FileChatApp extends JFrame {",
		  "    private JTextArea chatArea;",
		  "    private JTextField messageField;",
		  "    private JButton sendButton;",
		  "",
		  "    private File senderFile;",
		  "    private File receiverFile;",
		  "",
		  "    public FileChatApp(String senderName, String receiverName) {",
		  "        setTitle(\"File Chat - \" + senderName);",
		  "        setSize(400, 300);",
		  "        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);",
		  "",
		  "        chatArea = new JTextArea();",
		  "        chatArea.setEditable(false);",
		  "",
		  "        messageField = new JTextField();",
		  "        sendButton = new JButton(\"Send\");",
		  "",
		  "        senderFile = new File(senderName + \".txt\");",
		  "        receiverFile = new File(receiverName + \".txt\");",
		  "",
		  "        sendButton.addActionListener(new ActionListener() {",
		  "            @Override",
		  "            public void actionPerformed(ActionEvent e) {",
		  "                sendMessage();",
		  "            }",
		  "        });",
		  "",
		  "        JScrollPane scrollPane = new JScrollPane(chatArea);",
		  "",
		  "        JPanel inputPanel = new JPanel();",
		  "        inputPanel.setLayout(new BorderLayout());",
		  "        inputPanel.add(messageField, BorderLayout.CENTER);",
		  "        inputPanel.add(sendButton, BorderLayout.EAST);",
		  "",
		  "        getContentPane().setLayout(new BorderLayout());",
		  "        getContentPane().add(scrollPane, BorderLayout.CENTER);",
		  "        getContentPane().add(inputPanel, BorderLayout.SOUTH);",
		  "",
		  "        // Ensure that both sender and receiver files exist",
		  "        createIfNotExists(senderFile);",
		  "        createIfNotExists(receiverFile);",
		  "",
		  "        refreshChat();",
		  "        startAutoRefresh(); // Call the auto-refresh method",
		  "    }",
		  "",
		  "    private void sendMessage() {",
		  "        String message = messageField.getText();",
		  "        if (!message.isEmpty()) {",
		  "            try (PrintWriter writer = new PrintWriter(new FileWriter(senderFile, true))) {",
		  "                writer.println(message);",
		  "                writer.flush();",
		  "                messageField.setText(\"\");",
		  "                refreshChat();",
		  "            } catch (IOException ex) {",
		  "                ex.printStackTrace();",
		  "            }",
		  "        }",
		  "    }",
		  "",
		  "    private void refreshChat() {",
		  "        chatArea.setText(\"\");",
		  "        try (BufferedReader reader = new BufferedReader(new FileReader(receiverFile))) {",
		  "            String line;",
		  "            while ((line = reader.readLine()) != null) {",
		  "                chatArea.append(line + \"\\n\");",
		  "            }",
		  "        } catch (IOException ex) {",
		  "            ex.printStackTrace();",
		  "        }",
		  "    }",
		  "",
		  "    private void startAutoRefresh() {",
		  "        Timer timer = new Timer();",
		  "        timer.scheduleAtFixedRate(new TimerTask() {",
		  "            @Override",
		  "            public void run() {",
		  "                refreshChat();",
		  "            }",
		  "        }, 0, 1000); // Refresh every 1 second (adjust as needed)",
		  "    }",
		  "",
		  "    private void createIfNotExists(File file) {",
		  "        if (!file.exists()) {",
		  "            try {",
		  "                file.createNewFile();",
		  "            } catch (IOException e) {",
		  "                e.printStackTrace();",
		  "            }",
		  "        }",
		  "    }",
		  "",
		  "    public static void main(String[] args) {",
		  "        String senderName = \"User1\";",
		  "        String receiverName = \"User2\";",
		  "",
		  "        SwingUtilities.invokeLater(() -> {",
		  "            FileChatApp senderApp = new FileChatApp(senderName, receiverName);",
		  "            senderApp.setVisible(true);",
		  "        });",
		  "",
		  "        SwingUtilities.invokeLater(() -> {",
		  "            FileChatApp receiverApp = new FileChatApp(receiverName, senderName);",
		  "            receiverApp.setVisible(true);",
		  "        });",
		  "    }",
		  "}",
		  ""
		],
		"description": "Java Gui FileChatApp"
	  },
	  "Java Buffer File Read": {
		"prefix": "jbufferRead",
		"body": [
		  "import java.io.BufferedReader;",
		  "import java.io.FileReader;",
		  "import java.io.IOException;",
		  "",
		  "public class BufferedFileReaderApp {",
		  "    public static void main(String[] args) {",
		  "        String fileName = \"example.txt\";",
		  "",
		  "        try (BufferedReader bufferedReader = new BufferedReader(new FileReader(fileName))) {",
		  "            String line;",
		  "            while ((line = bufferedReader.readLine()) != null) {",
		  "                System.out.println(line);",
		  "            }",
		  "        } catch (IOException e) {",
		  "",
		  "            if (e.getMessage().equals(fileName + \" (No such file or directory)\")) {",
		  "                System.out.println(\"File not found. Creating file...\");",
		  "                try {",
		  "                    new java.io.File(fileName).createNewFile();",
		  "                    System.out.println(\"File created successfully.\");",
		  "                } catch (IOException e2) {",
		  "                    System.out.println(\"An error occurred: \" + e2.getMessage());",
		  "                }",
		  "            } else {",
		  "                System.out.println(\"An error occurred: \" + e.getMessage());",
		  "            }",
		  "",
		  "        }",
		  "    }",
		  "}"
		],
		"description": "Java Buffer File Read"
	  },

	  "Java RadioButtonApp": {
		"prefix": "jradio",
		"body": [
		  "import javax.swing.ButtonGroup;",
		  "import javax.swing.JFrame;",
		  "import javax.swing.JPanel;",
		  "import javax.swing.JRadioButton;",
		  "import javax.swing.JLabel;",
		  "import java.awt.BorderLayout;",
		  "import java.awt.FlowLayout;",
		  "import java.awt.event.ActionEvent;",
		  "import java.awt.event.ActionListener;",
		  "",
		  "public class RadioButtonApp {",
		  "    public static void main(String[] args) {",
		  "        JFrame frame = new JFrame(\"Radio Button Example\");",
		  "        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);",
		  "",
		  "        JPanel panel = new JPanel();",
		  "        panel.setLayout(new FlowLayout());",
		  "",
		  "        JRadioButton radioButton1 = new JRadioButton(\"Option 1\");",
		  "        JRadioButton radioButton2 = new JRadioButton(\"Option 2\");",
		  "        JRadioButton radioButton3 = new JRadioButton(\"Option 3\");",
		  "",
		  "        ButtonGroup buttonGroup = new ButtonGroup();",
		  "        buttonGroup.add(radioButton1);",
		  "        buttonGroup.add(radioButton2);",
		  "        buttonGroup.add(radioButton3);",
		  "",
		  "        JLabel selectionLabel = new JLabel(\"Selected option: \");",
		  "",
		  "        ActionListener radioButtonListener = new ActionListener() {",
		  "            @Override",
		  "            public void actionPerformed(ActionEvent e) {",
		  "                JRadioButton selectedRadioButton = (JRadioButton) e.getSource();",
		  "                selectionLabel.setText(\"Selected option: \" + selectedRadioButton.getText());",
		  "            }",
		  "        };",
		  "",
		  "        radioButton1.addActionListener(radioButtonListener);",
		  "        radioButton2.addActionListener(radioButtonListener);",
		  "        radioButton3.addActionListener(radioButtonListener);",
		  "",
		  "        panel.add(radioButton1);",
		  "        panel.add(radioButton2);",
		  "        panel.add(radioButton3);",
		  "",
		  "        JPanel bottomPanel = new JPanel();",
		  "        bottomPanel.setLayout(new BorderLayout());",
		  "        bottomPanel.add(selectionLabel, BorderLayout.NORTH);",
		  "",
		  "        frame.add(panel);",
		  "        frame.add(bottomPanel, BorderLayout.SOUTH);",
		  "        frame.pack();",
		  "        frame.setVisible(true);",
		  "    }",
		  "}",
		  ""
		],
		"description": "Java RadioButtonApp"
	  }
}