{
  "C Starter Template": {
    "prefix": "sst",
    "body": [
      "#include <stdio.h>",
      "",
      "int main(int argc, char *argv[]) {",
      "",
      " int k;",
      "  ${1:code_here}",
      "",
      "  return 0;",
      "}",
      ""
    ],
    "description": "C Starter Template"
  },
  "Input number": {
    "prefix": "input",
    "body": [
      "  int ${1:num};",
      "  printf(\"Enter a number : \");",
      "  scanf(\"%d\", ${1:num});"
    ],
    "description": "Input number"
  },
  "BubbleSort": {
    "prefix": "aamdobubble",
    "body": [
      "void bubble_sort(int arr[], int size) {",
      "  int temp, flag;",
      "  for (int i = 0; i < size; i++) {",
      "    flag = 0;",
      "    for (int j = 0; j < size - i - 1; j++) {",
      "      if (arr[j] > arr[j + 1]) {",
      "        temp = arr[j];",
      "        arr[j] = arr[j + 1];",
      "        arr[j + 1] = temp;",
      "        flag = 1;",
      "      }",
      "    }",
      "",
      "    if (flag == 0) break;",
      "  }",
      "}"
    ],
    "description": "BubbleSort"
  },
  "Print Array": {
    "prefix": "printarray",
    "body": [
      "void print_array(int arr[], int size) {",
      "  for (int i = 0; i < size; i++) {",
      "    printf(\"%d, \", arr[i]);",
      "  }",
      "  printf(\"\\n\");",
      "}"
    ],
    "description": "Print Array"
  },
  "Selection Sort": {
    "prefix": "aamselectionsort",
    "body": [
      "void selection_sort(int arr[], int size) {",
      "  int temp, minIndex;",
      "",
      "  for (int i = 0; i < size - 1; i++) {",
      "    minIndex = i;",
      "    for (int j = i + 1; j < size; j++) {",
      "      if (arr[j] < arr[minIndex]) {",
      "        minIndex = j;",
      "      }",
      "    }",
      "",
      "    temp = arr[i];",
      "    arr[i] = arr[minIndex];",
      "    arr[minIndex] = temp;",
      "  }",
      "}"
    ],
    "description": "Selection Sort"
  },
  "I need a plus": {
    "prefix": "aamgivemeplus",
    "body": [
      "int n;",
      "  printf(\"odd n: \");",
      "  scanf(\"%d\", &n);",
      "",
      "  if (n % 2 == 0) {",
      "    printf(\"need an odd.\\n\");",
      "    return 0;",
      "  }",
      "",
      "  int i, j;",
      "  for (i = 1; i <= n; i++) {",
      "    for (j = 1; j <= n; j++) {",
      "      if (i == (n + 1) / 2 || j == (n + 1) / 2) {",
      "        printf(\"* \");",
      "      } else {",
      "        printf(\"  \");",
      "      }",
      "    }",
      "    printf(\"\\n\");",
      "  }"
    ],
    "description": "I need a plus"
  },
  "multi array": {
    "prefix": "aamgivememulti",
    "body": [
      "  int row, col;",
      "  scanf(\"%d %d\", &row, &col);",
      "",
      "  int arr[row][col];",
      "  for (int i = 0; i < row; i++) {",
      "    for (int j = 0; j < col; j++) {",
      "      scanf(\"%d\", &arr[i][j]);",
      "    }",
      "  }",
      "",
      "  printf(\"%d x %d matrix is:\\n\", row, col);",
      "  for (int i = 0; i < row; i++) {",
      "    for (int j = 0; j < col; j++) {",
      "      printf(\"%d \", arr[i][j]);",
      "    }",
      "    printf(\"\\n\");",
      "  }",
      ""
    ],
    "description": "multi array"
  },
  "Reverse a matrix": {
    "prefix": "aamreversematrix",
    "body": [
      "int rev_arr[row][col];",
      "  for (int i = row - 1; i >= 0; i--) {",
      "    for (int j = col - 1; j >= 0; j--) {",
      "      rev_arr[row - i - 1][col - j - 1] = arr[i][j];",
      "    }",
      "  }"
    ],
    "description": "Reverse a matrix"
  },
  "Remove duplicates": {
    "prefix": "aamremoveduplicate",
    "body": [
      "int *remove_duplicates(int arr[], int size, int *new_size) {",
      "  int uc = 0;",
      "  int *new_arr = malloc(size * sizeof(int));",
      "",
      "  for (int i = 0; i < size; i++) {",
      "    bool isu = true;",
      "",
      "    for (int j = 0; j < uc; j++) {",
      "      if (new_arr[j] == arr[i]) {",
      "        isu = false;",
      "        break;",
      "      }",
      "    }",
      "",
      "    if (isu == true) {",
      "      new_arr[uc++] = arr[i];",
      "    }",
      "  }",
      "",
      "  if (uc < size) {",
      "    new_arr = realloc(new_arr, uc * sizeof(int));",
      "  }",
      "",
      "  *new_size = uc;",
      "  return new_arr;",
      "}"
    ],
    "description": "Remove duplicates"
  }
}
